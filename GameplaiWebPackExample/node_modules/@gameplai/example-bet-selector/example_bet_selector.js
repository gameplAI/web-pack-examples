class ExampleBetSelector extends HTMLElement {
    constructor() {
      super();
    console.log('Constructor');
    const width = this.getAttribute("width") || "100%";
    const height = this.getAttribute("height") || "100%";
    var urlPrefix = import.meta.url;
    console.log(urlPrefix);
    if (urlPrefix.endsWith('?module')) {
      urlPrefix = urlPrefix.slice(0, -7);
    }
    console.log(urlPrefix);
    urlPrefix = urlPrefix.slice(0, -23);
    console.log(urlPrefix);
    this.innerHTML = `
<iframe
  style="height: ${height}; 
  width: ${width}; 
  border: none"
  src="${urlPrefix}example_bet_selector.html"
  </iframe>
    `;

  // this.id = 'gameplai-bet-selector';
  // console.log(import.meta.url);
  // const url = import.meta.url;
  // const urlPrefix = url.substring(0, url.length - 23);
  // console.log(urlPrefix);

  //   const shadow = this.attachShadow({mode: 'open'});
  //   const frame = document.createElement('iframe');
  //   frame.id = 'ourframeid';
  //   frame.style.width = width;
  //   frame.style.height = height;
  //   // frame.src = urlPrefix + 'example_bet_selector.html';
  //   frame.srcdoc = `<!DOCTYPE html>
  //   <html>
  //   <head>
  //     <!--
  //       If you are serving your web app in a path other than the root, change the
  //       href value below to reflect the base path you are serving from.
    
  //       The path provided below has to start and end with a slash "/" in order for
  //       it to work correctly.
    
  //     -->
  //     <base href="${urlPrefix}">
    
  //     <meta charset="UTF-8">
  //     <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  //     <meta name="description" content="Gameplai bet selector web app component">
    
  //     <!-- iOS meta tags & icons -->
  //     <meta name="apple-mobile-web-app-capable" content="yes">
  //     <meta name="apple-mobile-web-app-status-bar-style" content="black">
  //     <meta name="apple-mobile-web-app-title" content="gameplai_component_betselector">
  //     <!-- <link rel="apple-touch-icon" href="icons/Icon-192.png"> -->
    
  //     <!-- Favicon -->
  //     <!-- <link rel="icon" type="image/png" href="favicon.png"/> -->
    
  //     <link rel="manifest" href="manifest.json">
  //   </head>
  //   <body>
  //   <!--<div id="holder">-->
  //   <!--  <div class="loading">-->
  //   <!--    <div class="loader"></div>-->
  //   <!--  </div>-->
  //   <!--</div>-->
  //     <!-- This script installs service_worker.js to provide PWA functionality to
  //          application. For more information, see:
  //          https://developers.google.com/web/fundamentals/primers/service-workers -->
  //     <script>
  //       var serviceWorkerVersion = null;
  //       var scriptLoaded = false;
  //       function loadMainDartJs() {
  //         if (scriptLoaded) {
  //           return;
  //         }
  //         scriptLoaded = true;
  //         var scriptTag = document.createElement('script');
  //         scriptTag.src = '${urlPrefix}main.dart.js';
  //         scriptTag.type = 'application/javascript';
  //         document.body.append(scriptTag);
  //       }
    
  //       if ('serviceWorker' in navigator) {
  //         console.log('using service workers!');
  //         // Service workers are supported. Use them.
  //         window.addEventListener('load', function () {
  //           // Wait for registration to finish before dropping the <script> tag.
  //           // Otherwise, the browser will load the script multiple times,
  //           // potentially different versions.
  //           var serviceWorkerUrl = 'flutter_service_worker.js?v=' + serviceWorkerVersion;
  //           // var serviceWorkerUrl = 'flutter_service_worker.js';
  //           navigator.serviceWorker.register(serviceWorkerUrl)
  //             .then((reg) => {
  //               function waitForActivation(serviceWorker) {
  //                 serviceWorker.addEventListener('statechange', () => {
  //                   if (serviceWorker.state == 'activated') {
  //                     console.log('Installed new service worker.');
  //                     loadMainDartJs();
  //                   }
  //                 });
  //               }
  //               if (!reg.active && (reg.installing || reg.waiting)) {
  //                 // No active web worker and we have installed or are installing
  //                 // one for the first time. Simply wait for it to activate.
  //                 waitForActivation(reg.installing || reg.waiting);
  //               } else if (!reg.active.scriptURL.endsWith(serviceWorkerVersion)) {
  //                 // When the app updates the serviceWorkerVersion changes, so we
  //                 // need to ask the service worker to update.
  //                 console.log('New service worker available.');
  //                 reg.update();
  //                 waitForActivation(reg.installing);
  //               } else {
  //                 // Existing service worker is still good.
  //                 console.log('Loading app from service worker.');
  //                 loadMainDartJs();
  //               }
  //             });
    
  //           // If service worker doesn't succeed in a reasonable amount of time,
  //           // fallback to plain <script> tag.
  //           setTimeout(() => {
  //             if (!scriptLoaded) {
  //               console.warn(
  //                 'Failed to load app from service worker. Falling back to plain <script> tag.',
  //               );
  //               loadMainDartJs();
  //             }
  //           }, 4000);
  //         });
  //       } else {
  //         // Service workers not supported. Just drop the <script> tag.
  //         loadMainDartJs();
  //       }
  //     </script>
  //     <script src="${urlPrefix}get_attributes.js"></script>
  //   </body>
  //   </html>
  //   `;
  //   shadow.appendChild(frame);



  // Create a shadow root
  // const shadow = this.attachShadow({mode: 'open'});

  // // const styleLink = document.createElement('link');
  // // styleLink.setAttribute('rel', 'stylesheet');
  // // // styleLink.setAttribute('href', urlPrefix + 'style.css');
  // // styleLink.setAttribute('href', 'style.css');

  // const base = document.createElement('base');
  // base.href = '/node_modules/@gameplai/example-bet-selector/';

  // const manifestLink = document.createElement('link');
  // manifestLink.setAttribute('rel', 'manifest');
  // manifestLink.setAttribute('href', urlPrefix + 'manifest.json');
  // // manifestLink.setAttribute('href', 'manifest.json');

  // const attributesScript = document.createElement('script');
  // attributesScript.setAttribute('src', urlPrefix + 'get_attributes.js');
  // // attributesScript.setAttribute('src', 'get_attributes.js');

  // shadow.appendChild(base);
  // // shadow.appendChild(styleLink);
  // shadow.appendChild(manifestLink);
  // shadow.appendChild(attributesScript);

  // var serviceWorkerVersion = null;
  // var scriptLoaded = false;
  // function loadMainDartJs() {
  //   if (scriptLoaded) {
  //     return;
  //   }
  //   scriptLoaded = true;
  //   var scriptTag = document.createElement('script');
  //   scriptTag.src = urlPrefix + 'main.dart.js';
  //   // scriptTag.src = 'main.dart.js';
  //   scriptTag.type = 'application/javascript';
  //   document.body.append(scriptTag);
  // }

  // if ('serviceWorker' in navigator) {
  //   // Service workers are supported. Use them.
  //   window.addEventListener('load', function () {
  //     // Wait for registration to finish before dropping the <script> tag.
  //     // Otherwise, the browser will load the script multiple times,
  //     // potentially different versions.
  //     var serviceWorkerUrl = urlPrefix + 'flutter_service_worker.js?v=' + serviceWorkerVersion;
  //     // var serviceWorkerUrl = 'flutter_service_worker.js?v=' + serviceWorkerVersion;
  //     navigator.serviceWorker.register(serviceWorkerUrl)
  //       .then((reg) => {
  //         function waitForActivation(serviceWorker) {
  //           serviceWorker.addEventListener('statechange', () => {
  //             if (serviceWorker.state == 'activated') {
  //               console.log('Installed new service worker.');
  //               loadMainDartJs();
  //             }
  //           });
  //         }
  //         if (!reg.active && (reg.installing || reg.waiting)) {
  //           // No active web worker and we have installed or are installing
  //           // one for the first time. Simply wait for it to activate.
  //           waitForActivation(reg.installing || reg.waiting);
  //         } else if (!reg.active.scriptURL.endsWith(serviceWorkerVersion)) {
  //           // When the app updates the serviceWorkerVersion changes, so we
  //           // need to ask the service worker to update.
  //           console.log('New service worker available.');
  //           reg.update();
  //           waitForActivation(reg.installing);
  //         } else {
  //           // Existing service worker is still good.
  //           console.log('Loading app from service worker.');
  //           loadMainDartJs();
  //         }
  //       });

  //     // If service worker doesn't succeed in a reasonable amount of time,
  //     // fallback to plain <script> tag.
  //     setTimeout(() => {
  //       if (!scriptLoaded) {
  //         console.warn(
  //           'Failed to load app from service worker. Falling back to plain <script> tag.',
  //         );
  //         loadMainDartJs();
  //       }
  //     }, 4000);
  //   });
  // } else {
  //   // Service workers not supported. Just drop the <script> tag.
  //   loadMainDartJs();
  // }
    }

    get betid() {
      return this.getAttribute('betid');
    }
    
    set betid(newValue) {
      this.setAttribute('betid', newValue);
    }

    get target() {
      return this.getAttribute('target');
    }
    
    set target(newValue) {
      this.setAttribute('target', newValue);
    }

    static get observedAttributes() {
      return ['betid', 'target'];
    }
    
    attributeChangedCallback(name, oldValue, newValue) {
      this.children[1].contentWindow.onPropertyChange(name, oldValue, newValue);
    }
}


customElements.define('example-bet-selector', ExampleBetSelector);